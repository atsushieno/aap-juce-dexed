diff --git a/CMakeLists.txt b/CMakeLists.txt
index 92f66d9..f77d9d3 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -13,7 +13,7 @@ if (${CMAKE_SYSTEM_NAME} STREQUAL "iOS")
 #    set(CMAKE_XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY "iPhone Developer" CACHE STRING "" FORCE)
 #    set(CMAKE_XCODE_ATTRIBUTE_DEVELOPMENT_TEAM "XXXXXXXXXX" CACHE STRING "" FORCE)
 else()
-    set(CMAKE_OSX_DEPLOYMENT_TARGET "10.9" CACHE STRING "Minimum OS X deployment version" FORCE)
+    set(CMAKE_OSX_DEPLOYMENT_TARGET "11.0" CACHE STRING "Minimum OS X deployment version" FORCE)
 endif()
 
 if (CMAKE_BUILD_TYPE STREQUAL "Release")
diff --git a/Source/CMakeLists.txt b/Source/CMakeLists.txt
index a8313d1..43d91ed 100644
--- a/Source/CMakeLists.txt
+++ b/Source/CMakeLists.txt
@@ -113,3 +113,54 @@ PUBLIC
     juce::juce_recommended_config_flags
     juce::juce_recommended_lto_flags
 )
+
+# begin JUCEAAP specific -->
+
+include_directories(
+		"${AAP_DIR}/include"
+		"${JUCE_DIR}/modules"
+)
+
+juce_add_modules(${AAP_JUCE_DIR}/aap-modules/aap_audio_processors)
+target_link_libraries(${BaseTargetName}
+		PRIVATE
+		aap_audio_processors
+		)
+
+add_compile_definitions(
+		[[JUCEAAP_USE_UNIQUE_ID=1]]
+		[[JUCEAAP_HOSTED_PARAMETER=1]]
+		[[JUCEAAP_HAVE_AUDIO_PLAYHEAD_NEW_POSITION_INFO=1]]
+)
+
+if (ANDROID)
+add_library("cpufeatures" STATIC "${ANDROID_NDK}/sources/android/cpufeatures/cpu-features.c")
+set_source_files_properties("${ANDROID_NDK}/sources/android/cpufeatures/cpu-features.c" PROPERTIES COMPILE_FLAGS "-Wno-sign-conversion -Wno-gnu-statement-expression")
+
+# dependencies
+find_library(log "log")
+find_library(android "android")
+find_library(glesv2 "GLESv2")
+find_library(egl "EGL")
+set(cpufeatures_lib "cpufeatures")
+set(oboe_lib "oboe")
+set(CMAKE_CXX_FLAGS_RELEASE "-O3")
+
+add_compile_definitions(
+		[[JUCE_ANDROID=1]]
+		[[JUCE_DONT_AUTO_OPEN_MIDI_DEVICES_ON_MOBILE=1]]
+		[[JUCE_PUSH_NOTIFICATIONS_ACTIVITY="com/rmsl/juce/JuceActivity"]]
+		[[JUCE_PUSH_NOTIFICATIONS=1]]
+		[[JUCE_USE_ANDROID_OBOE_STABILIZED_CALLBACK=1]]
+)
+
+target_link_libraries(${BaseTargetName}
+    PRIVATE
+    ${log}
+    ${android}
+    ${glesv2}
+    ${egl}
+    ${cpufeatures_lib}
+    )
+endif (ANDROID)
+# <-- end JUCEAAP specific
diff --git a/Source/CartManager.cpp b/Source/CartManager.cpp
index 779026e..5417782 100644
--- a/Source/CartManager.cpp
+++ b/Source/CartManager.cpp
@@ -265,10 +265,10 @@ void CartManager::buttonClicked(juce::Button *buttonThatWasClicked) {
     if ( buttonThatWasClicked == loadButton.get() ) {
         FileChooser fc ("Import original DX sysex...", File::getSpecialLocation(File::SpecialLocationType::userDocumentsDirectory), "*.syx;*.SYX;*.*", 1);
 
-        if ( fc.browseForFileToOpen()) {
+        fc.launchAsync(juce::FileBrowserComponent::openMode, [&](const juce::FileChooser &_fc) {
             mainWindow->loadCart(fc.getResult());
             updateCartFilename();
-        }
+        });
         return;
     }
 
@@ -322,7 +322,8 @@ void CartManager::fileClicked(const File& file, const MouseEvent& e) {
         menu.addSeparator();
         menu.addItem(1020, "Refresh");
 
-        switch(menu.show()) {
+        menu.showMenuAsync(PopupMenu::Options{}, [=](int result) {
+        switch(result) {
         case 1000:
             file.revealToUser();
             break;
@@ -332,7 +333,7 @@ void CartManager::fileClicked(const File& file, const MouseEvent& e) {
         case 1020:
             cartBrowserList->refresh();
             break;
-        }
+        }});
         return;
     }
 }
@@ -382,7 +383,8 @@ void CartManager::programRightClicked(ProgramListBox *source, int pos) {
     if ( source == activeCart.get() )
         menu.addItem(1010, "Send current sysex cartridge to DX7");
 
-    switch(menu.show())  {
+    menu.showMenuAsync(PopupMenu::Options{}, [&](int result) {
+    switch(result)  {
         case 1000:
             uint8_t unpackPgm[161];
 
@@ -403,7 +405,7 @@ void CartManager::programRightClicked(ProgramListBox *source, int pos) {
         case 1010:
             mainWindow->processor->sendCurrentSysexCartridge();
             break;
-    }
+    }});
 }
 
 void CartManager::programDragged(ProgramListBox *destListBox, int dest, char *packedPgm) {
diff --git a/Source/GlobalEditor.cpp b/Source/GlobalEditor.cpp
index ca5c494..9af2223 100644
--- a/Source/GlobalEditor.cpp
+++ b/Source/GlobalEditor.cpp
@@ -698,13 +698,13 @@ void GlobalEditor::buttonClicked (juce::Button* buttonThatWasClicked)
         //[UserButtonCode_monoMode] -- add your button handler code here..
         //[/UserButtonCode_monoMode]
     }
-    else if (buttonThatWasClicked == aboutButton.get())
+    /*else if (buttonThatWasClicked == aboutButton.get())
     {
         //[UserButtonCode_aboutButton] -- add your button handler code here..
         AboutBox about(this->getParentComponent());
         about.runModalLoop();
         //[/UserButtonCode_aboutButton]
-    }
+    }*/
 
     //[UserbuttonClicked_Post]
     //[/UserbuttonClicked_Post]
@@ -792,7 +792,7 @@ void GlobalEditor::mouseDown(const MouseEvent &e) {
         PopupMenu popup;
         popup.addItem(1, "Send current program to DX7");
 
-        auto p = popup.show();
+        popup.showMenuAsync(PopupMenu::Options{}, [=](int p) {
         switch( p )
         {
         case 1:
@@ -800,7 +800,7 @@ void GlobalEditor::mouseDown(const MouseEvent &e) {
            break;
         default:
             break;
-        }
+        }});
     }
 }
 //[/MiscUserCode]
diff --git a/Source/OperatorEditor.cpp b/Source/OperatorEditor.cpp
index 3eef23e..a17f3d8 100644
--- a/Source/OperatorEditor.cpp
+++ b/Source/OperatorEditor.cpp
@@ -607,7 +607,8 @@ void OperatorEditor::mouseDown(const MouseEvent &event) {
         popup.addSeparator();
         popup.addItem(4, "Send current program to DX7");
 
-        switch(popup.show()) {
+        popup.showMenuAsync(PopupMenu::Options{},[&](int result) {
+        switch(result) {
             case 1:
                 processor->copyToClipboard(internalOp);
             break;
@@ -623,7 +624,7 @@ void OperatorEditor::mouseDown(const MouseEvent &event) {
             case 4:
                 processor->sendCurrentSysexProgram();
             break;
-        }
+        }});
 
     }
 }
diff --git a/Source/PluginEditor.cpp b/Source/PluginEditor.cpp
index 47ec4cc..df7aeaa 100644
--- a/Source/PluginEditor.cpp
+++ b/Source/PluginEditor.cpp
@@ -133,10 +133,10 @@ void DexedAudioProcessorEditor::loadCart(File file) {
     }
 
     if ( rc != 0 ) {
-        rc = AlertWindow::showOkCancelBox(AlertWindow::QuestionIcon, "Unable to find DX7 sysex cartridge in file",
+        /*rc = AlertWindow::showOkCancelBox(AlertWindow::QuestionIcon, "Unable to find DX7 sysex cartridge in file",
                                           "This sysex file is not for the DX7 or it is corrupted. "
                                           "Do you still want to load this file as random data ?");
-        if ( rc == 0 )
+        if ( rc == 0 )*/
             return;
     }
 
@@ -153,13 +153,13 @@ void DexedAudioProcessorEditor::saveCart() {
     File startFileName = processor->activeFileCartridge.exists() ? processor->activeFileCartridge : processor->dexedCartDir;
 
     FileChooser fc ("Export DX sysex...", processor->dexedCartDir, "*.syx;*.SYX", 1);
-    if ( fc.browseForFileToSave(true) ) {
+    fc.launchAsync(FileBrowserComponent::saveMode, [=](const FileChooser& fc) {
         if ( ! processor->currentCart.saveVoice(fc.getResults().getReference(0)) ) {
             AlertWindow::showMessageBoxAsync (AlertWindow::WarningIcon,
                                               "Error",
                                               "Unable to write: " + fc.getResults().getReference(0).getFullPathName());
         }
-    }
+    });
 }
 
 void DexedAudioProcessorEditor::tuningShow() {
@@ -306,6 +306,9 @@ void DexedAudioProcessorEditor::rebuildProgramCombobox() {
 }
 
 void DexedAudioProcessorEditor::storeProgram() {
+#if ANDROID
+    AlertWindow::showMessageBoxAsync(AlertWindow::WarningIcon, "Not Supported", "We don't support storing proglrams on Android build yet.");
+#else
     String currentName = Cartridge::normalizePgmName((const char *) processor->data+145);
     Cartridge destSysex = processor->currentCart;
     File *externalFile = NULL;
@@ -404,6 +407,7 @@ void DexedAudioProcessorEditor::storeProgram() {
     if ( externalFile != NULL )
         delete externalFile;
     cartManager.resetActiveSysex();
+#endif
 }
 
 class MidiCCListener: public AlertWindow, Value::Listener {
@@ -433,8 +437,12 @@ public :
 };
 
 void DexedAudioProcessorEditor::discoverMidiCC(Ctrl *ctrl) {
+#if ANDROID
+    AlertWindow::showMessageBoxAsync(AlertWindow::WarningIcon, "Not Supported", "We don't support storing proglrams on Android build yet.");
+#else
     MidiCCListener ccListener(this, ctrl);
     ccListener.runModalLoop();
+#endif
 }
 
 bool DexedAudioProcessorEditor::isInterestedInFileDrag (const StringArray &files)
@@ -459,14 +467,14 @@ void DexedAudioProcessorEditor::filesDropped (const StringArray &files, int x, i
         if (fn.endsWithIgnoreCase(".scl"))
         {
             if (filesize == 0) {
-                AlertWindow::showMessageBox(
+                AlertWindow::showMessageBoxAsync(
                     AlertWindow::WarningIcon,
                     "File size error!",
                     "File \'" + fn.toStdString() + "\' is empty."
                 );
             }
             else if (filesize > MAX_SCL_KBM_FILE_SIZE) {
-                AlertWindow::showMessageBox(
+                AlertWindow::showMessageBoxAsync(
                     AlertWindow::WarningIcon,
                     "File size error!",
                     "File \'" + fn.toStdString() + "\' has " + std::to_string(filesize) + " bytes, exceeding the maximum limit ("+std::to_string(MAX_SCL_KBM_FILE_SIZE)+")."
@@ -479,14 +487,14 @@ void DexedAudioProcessorEditor::filesDropped (const StringArray &files, int x, i
         if (fn.endsWithIgnoreCase(".kbm"))
         {
             if (filesize == 0) {
-                AlertWindow::showMessageBox(
+                AlertWindow::showMessageBoxAsync(
                     AlertWindow::WarningIcon,
                     "File size error!",
                     "File \'" + fn.toStdString() + "\' is empty."
                 );
             }
             else if (filesize > MAX_SCL_KBM_FILE_SIZE) {
-                AlertWindow::showMessageBox(
+                AlertWindow::showMessageBoxAsync(
                     AlertWindow::WarningIcon,
                     "File size error!",
                     "File \'" + fn.toStdString() + "\' has " + std::to_string(filesize) + " bytes, exceeding the maximum limit (" + std::to_string(MAX_SCL_KBM_FILE_SIZE) + ")."
@@ -498,20 +506,20 @@ void DexedAudioProcessorEditor::filesDropped (const StringArray &files, int x, i
         }
     }
     catch (const std::ios_base::failure& ex) {
-        AlertWindow::showMessageBox(
+        AlertWindow::showMessageBoxAsync(
             AlertWindow::WarningIcon, 
             "I/O error!", 
             "Related to file \'" + fn.toStdString() + "\', an exception (std::ios_base::failure) occured: " + ex.what()
         );
     }
     catch (std::bad_alloc& ex) {
-        AlertWindow::showMessageBox(
+        AlertWindow::showMessageBoxAsync(
             AlertWindow::WarningIcon, 
             "I/O error!", 
             "Related to file \'" + fn.toStdString() + "\', an exception (std::bad_alloc) occured: " + ex.what());
     }
     catch (...) {
-        AlertWindow::showMessageBox(
+        AlertWindow::showMessageBoxAsync(
             AlertWindow::WarningIcon, 
             "I/O error!", 
             "Related to file \'"+fn.toStdString()+"\', an unknown exception occured.");
diff --git a/Source/PluginParam.cpp b/Source/PluginParam.cpp
index e4f7f83..74c03ed 100644
--- a/Source/PluginParam.cpp
+++ b/Source/PluginParam.cpp
@@ -137,16 +137,17 @@ void Ctrl::mouseDown(const juce::MouseEvent &event) {
         }
         popup.addItem(2, "Clear midi CC mapping");
 
-        switch(popup.show()) {
+        popup.showMenuAsync(PopupMenu::Options{}, [&](int result) {
+        switch(result) {
             case 1:
                 parent->mappedMidiCC.removeValue(this);
                 parent->savePreference();
                 break;
             case 2:
-                if ( AlertWindow::showYesNoCancelBox(AlertWindow::WarningIcon, "Confirm", "Clear midi mapping for all controller change (CC) messages?", "YES", "NO", "CANCEL") ) {
+                //if ( AlertWindow::showYesNoCancelBox(AlertWindow::WarningIcon, "Confirm", "Clear midi mapping for all controller change (CC) messages?", "YES", "NO", "CANCEL") ) {
                     parent->mappedMidiCC.clear();
                     parent->savePreference();
-                }
+                //}
                 break;
             case 3:
                 AudioProcessorEditor *editor = parent->getActiveEditor();
@@ -156,7 +157,7 @@ void Ctrl::mouseDown(const juce::MouseEvent &event) {
                 DexedAudioProcessorEditor *dexedEditor = (DexedAudioProcessorEditor *) editor;
                 dexedEditor->discoverMidiCC(this);
                 break;
-        }
+        }});
     }
 }
 
diff --git a/Source/PluginProcessor.cpp b/Source/PluginProcessor.cpp
index 0d51016..2237af7 100644
--- a/Source/PluginProcessor.cpp
+++ b/Source/PluginProcessor.cpp
@@ -866,27 +866,24 @@ void DexedAudioProcessor::applySCLTuning() {
     File s;
 
     // loop to enforce the proper selection
-    for (;;) {
-        // open file chooser dialog
-        if (!fc.browseForFileToOpen())
-            // User cancelled
-            return;
+    // open file chooser dialog
+    fc.launchAsync(juce::FileBrowserComponent::openMode, [&](const juce::FileChooser &_fc) {
         s = fc.getResult();
 
         // enforce file extenstion ''.scl''.
         // (reason: the extension ''.scl'' is mandatory according to 
         // ''https://www.huygens-fokker.org/scala/scl_format.html''
         if (s.getFileExtension() != ".scl") {
-            AlertWindow::showMessageBox(AlertWindow::WarningIcon, "Invalid file type!", "Only files with the \".scl\" extension (in lowercase!) are allowed.");
-            continue;
+            AlertWindow::showMessageBoxAsync(AlertWindow::WarningIcon, "Invalid file type!", "Only files with the \".scl\" extension (in lowercase!) are allowed.");
+            applySCLTuning();
         }
 
         // enforce to select file below the max limit16KB sized files
         if (s.getSize() > MAX_SCL_KBM_FILE_SIZE) {
             std::string msg;
             msg = "File size exceeded the maximum limit of " + std::to_string(MAX_SCL_KBM_FILE_SIZE) + " bytes.";
-            AlertWindow::showMessageBox(AlertWindow::WarningIcon, "File size error!", msg);
-            continue;
+            AlertWindow::showMessageBoxAsync(AlertWindow::WarningIcon, "File size error!", msg);
+            applySCLTuning();
         }
 
         // enforce to select non-empty file
@@ -894,16 +891,14 @@ void DexedAudioProcessor::applySCLTuning() {
         if (s.getSize() == 0) {
             std::string msg;
             msg = "File is empty.";
-            AlertWindow::showMessageBox(AlertWindow::WarningIcon, "File size error!", msg);
-            continue;
+            AlertWindow::showMessageBoxAsync(AlertWindow::WarningIcon, "File size error!", msg);
+            applySCLTuning();
         }
 
         // try to apply the SCL file 
         applySCLTuning(s);
 
-        // exit the loop
-        break;
-    }
+    });
 }
 
 void DexedAudioProcessor::applySCLTuning(File s) {
@@ -943,26 +938,23 @@ void DexedAudioProcessor::applyKBMMapping() {
     File s;
 
     // loop to enforce the proper selection
-    for (;;) {
-        // invoke file chooser dialog
-        if (!fc.browseForFileToOpen())            
-            return; // User cancelled
+    fc.launchAsync(juce::FileBrowserComponent::openMode, [&](const juce::FileChooser &_fc) {
         s = fc.getResult();
 
         // enforce file extenstion ''.kbm''.
         // (reason: the extension ''.kbm'' is mandatory according to 
         // ''https://www.huygens-fokker.org/scala/scl_format.html''
         if (s.getFileExtension() != ".kbm") {
-            AlertWindow::showMessageBox(AlertWindow::WarningIcon, "Invalid file type!", "Only files with the \".kbm\" extension (in lowercase!) are allowed.");
-            continue;
+            AlertWindow::showMessageBoxAsync(AlertWindow::WarningIcon, "Invalid file type!", "Only files with the \".kbm\" extension (in lowercase!) are allowed.");
+            applyKBMMapping();
         }
 
         // enforce to select file below the max limit16KB sized files
         if (s.getSize() > MAX_SCL_KBM_FILE_SIZE) {
             std::string msg;
             msg = "File size exceeded the maximum limit of " + std::to_string(MAX_SCL_KBM_FILE_SIZE) + " bytes.";
-            AlertWindow::showMessageBox(AlertWindow::WarningIcon, "File size error!", msg);
-            continue;
+            AlertWindow::showMessageBoxAsync(AlertWindow::WarningIcon, "File size error!", msg);
+            applyKBMMapping();
         }
 
         // enforce to select non-empty file
@@ -970,16 +962,13 @@ void DexedAudioProcessor::applyKBMMapping() {
         if (s.getSize() == 0) {
             std::string msg;
             msg = "File is empty.";
-            AlertWindow::showMessageBox(AlertWindow::WarningIcon, "File size error!", msg);
-            continue;
+            AlertWindow::showMessageBoxAsync(AlertWindow::WarningIcon, "File size error!", msg);
+            applyKBMMapping();
         }
 
         // try to apply KBM mapping
         applyKBMMapping(s);
-
-        // exit the loop
-        break;
-    }
+    });
 }
 
 void DexedAudioProcessor::applyKBMMapping( File s )
diff --git a/libs/JUCE b/libs/JUCE
index ae51448..51a8a6d 160000
--- a/libs/JUCE
+++ b/libs/JUCE
@@ -1 +1 @@
-Subproject commit ae5144833e852815d61642af87c69b9db44984f7
+Subproject commit 51a8a6d7aeae7326956d747737ccf1575e61e209-dirty
diff --git a/libs/surgesynthteam_tuningui b/libs/surgesynthteam_tuningui
--- a/libs/surgesynthteam_tuningui
+++ b/libs/surgesynthteam_tuningui
@@ -1 +1 @@
-Subproject commit 54f9a74cd55cdb33fb4d32d706067626857cfc75
+Subproject commit 54f9a74cd55cdb33fb4d32d706067626857cfc75-dirty
Submodule libs/surgesynthteam_tuningui contains modified content
diff --git a/libs/surgesynthteam_tuningui/surgesynthteam_tuningui.h b/libs/surgesynthteam_tuningui/surgesynthteam_tuningui.h
index fa17052..79b104d 100644
--- a/libs/surgesynthteam_tuningui/surgesynthteam_tuningui.h
+++ b/libs/surgesynthteam_tuningui/surgesynthteam_tuningui.h
@@ -179,15 +179,18 @@ public:
     virtual void cellClicked (int rowNumber, int columnId, const juce::MouseEvent & e) override {
         if( e.mods.isRightButtonDown() )
         {
+#if !ANDROID // TODO: implement
             rmbMenu->clear();
             rmbMenu->addItem(1, "Export to CSV" );
             auto result = rmbMenu->show();
             if( result == 1 )
                 exportToCSV();
+#endif
         }
     }
 
     virtual void exportToCSV() {
+#if !ANDROID // TODO: implement
         juce::FileChooser fc( "Export CSV to...", juce::File(), "*.csv" );
         if( fc.browseForFileToSave(true) )
         {
@@ -207,6 +210,7 @@ public:
 
             }
         }
+#endif
     }
        
 
